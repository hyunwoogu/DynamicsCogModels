message("Power goes wrong!")
return(0)
})
pow2 = tryCatch(
getRsq(realX, sampleY2, method="pow", loud=F),
error = function(error_message){
message("Power goes wrong!")
return(0)
})
}
for (met in methodList)
{
res1 = res2 = NA
while (c(is.na(res1))[1] | c(is.na(res2))[1]){
res1 = tryCatch(
getRsq(realX, sampleY1, method=met),
error = function(error_message){
message("Error!")
return(NA)
})
res2 = tryCatch(
getRsq(realX, sampleY2, method=met),
error = function(error_message){
message("Error!")
return(NA)
})
}
if ((res1$Rsquared > 0.9) & (res1$Rsquared > pow1) & (res2$Rsquared > 0.9) & (res2$Rsquared > pow2)) {
enough = T
break
}
}
cnt = cnt + 1
if (cnt == threshold) print("threshold reached")
}
plot(NULL, xlim=c(0,15), ylim=c(0.5,1))
points(realX, realY)
points(realX, sampleY1, col='red')
points(realX, sampleY2, col='blue')
resY1 = resY2 = NA
while (c(is.na(resY1))[1] | c(is.na(resY2))[1]) {
resY1 = tryCatch(
getRsq(realX, sampleY1, method=met, loud = T),
error = function(error_message){
message("Error!")
return(NA)
})
resY2 = tryCatch(
getRsq(realX, sampleY2, method=met, loud = T),
error = function(error_message){
message("Error!")
return(NA)
})
}
support = seq(0.001, max(realX), length=1e4)
predictY1 = predictValues(support = support,
method = met, params = resY1$EstParam)
predictY2 = predictValues(support = support,
method = met, params = resY2$EstParam)
lines(support, predictY1, col='red')
lines(support, predictY2, col='blue')
cat("Subject\t\tpower\t\t", met ,"\n")
cat("S#01\t\t", pow1, "\t\t", resY1$Rsquared)
cat("S#02\t\t", pow2, "\t\t", resY2$Rsquared)
enough = F
cnt = 0
threshold = 1e3
realX = x3
realY = y3
while (enough == F & cnt < threshold)
{
# sampleDev = sort(abs(rnorm(length(y), sd=.1)), decreasing = T)
sampleDev = (rnorm(length(realY), sd=.1))
sampleY1 = sapply(realY + sampleDev, function(x) min(x,.99))
sampleY2 = sapply(realY - sampleDev, function(x) max(x,.51))
if (is.unsorted(rev(sampleY1)) | is.unsorted(rev(sampleY2))) next
pow1 = pow2 = 0
while (pow1 == 0 | pow2 == 0) {
pow1 = tryCatch(
getRsq(realX, sampleY1, method="pow", loud=F),
error = function(error_message){
message("Power goes wrong!")
return(0)
})
pow2 = tryCatch(
getRsq(realX, sampleY2, method="pow", loud=F),
error = function(error_message){
message("Power goes wrong!")
return(0)
})
}
for (met in methodList)
{
res1 = res2 = NA
while (c(is.na(res1))[1] | c(is.na(res2))[1]){
res1 = tryCatch(
getRsq(realX, sampleY1, method=met),
error = function(error_message){
message("Error!")
return(NA)
})
res2 = tryCatch(
getRsq(realX, sampleY2, method=met),
error = function(error_message){
message("Error!")
return(NA)
})
}
if ((res1$Rsquared > 0.9) & (res1$Rsquared > pow1) & (res2$Rsquared > 0.9) & (res2$Rsquared > pow2)) {
enough = T
break
}
}
cnt = cnt + 1
if (cnt == threshold) print("threshold reached")
}
plot(NULL, xlim=c(0,15), ylim=c(0.5,1))
points(realX, realY)
points(realX, sampleY1, col='red')
points(realX, sampleY2, col='blue')
resY1 = resY2 = NA
while (c(is.na(resY1))[1] | c(is.na(resY2))[1]) {
resY1 = tryCatch(
getRsq(realX, sampleY1, method=met, loud = T),
error = function(error_message){
message("Error!")
return(NA)
})
resY2 = tryCatch(
getRsq(realX, sampleY2, method=met, loud = T),
error = function(error_message){
message("Error!")
return(NA)
})
}
support = seq(0.001, max(realX), length=1e4)
predictY1 = predictValues(support = support,
method = met, params = resY1$EstParam)
predictY2 = predictValues(support = support,
method = met, params = resY2$EstParam)
lines(support, predictY1, col='red')
lines(support, predictY2, col='blue')
cat("Subject\t\tpower\t\t", met ,"\n")
cat("S#01\t\t", pow1, "\t\t", resY1$Rsquared)
cat("S#02\t\t", pow2, "\t\t", resY2$Rsquared)
enough = F
cnt = 0
threshold = 1e3
realX = x3
realY = y3
while (enough == F & cnt < threshold)
{
# sampleDev = sort(abs(rnorm(length(y), sd=.1)), decreasing = T)
sampleDev = (rnorm(length(realY), sd=.1))
sampleY1 = sapply(realY + sampleDev, function(x) min(x,.99))
sampleY2 = sapply(realY - sampleDev, function(x) max(x,.51))
if (is.unsorted(rev(sampleY1)) | is.unsorted(rev(sampleY2))) next
pow1 = pow2 = 0
while (pow1 == 0 | pow2 == 0) {
pow1 = tryCatch(
getRsq(realX, sampleY1, method="pow", loud=F),
error = function(error_message){
message("Power goes wrong!")
return(0)
})
pow2 = tryCatch(
getRsq(realX, sampleY2, method="pow", loud=F),
error = function(error_message){
message("Power goes wrong!")
return(0)
})
}
for (met in methodList)
{
res1 = res2 = NA
while (c(is.na(res1))[1] | c(is.na(res2))[1]){
res1 = tryCatch(
getRsq(realX, sampleY1, method=met),
error = function(error_message){
message("Error!")
return(NA)
})
res2 = tryCatch(
getRsq(realX, sampleY2, method=met),
error = function(error_message){
message("Error!")
return(NA)
})
}
if ((res1$Rsquared > 0.9) & (res1$Rsquared > pow1) & (res2$Rsquared > 0.9) & (res2$Rsquared > pow2)) {
enough = T
break
}
}
cnt = cnt + 1
if (cnt == threshold) print("threshold reached")
}
plot(NULL, xlim=c(0,15), ylim=c(0.5,1))
points(realX, realY)
points(realX, sampleY1, col='red')
points(realX, sampleY2, col='blue')
resY1 = resY2 = NA
while (c(is.na(resY1))[1] | c(is.na(resY2))[1]) {
resY1 = tryCatch(
getRsq(realX, sampleY1, method=met, loud = T),
error = function(error_message){
message("Error!")
return(NA)
})
resY2 = tryCatch(
getRsq(realX, sampleY2, method=met, loud = T),
error = function(error_message){
message("Error!")
return(NA)
})
}
support = seq(0.001, max(realX), length=1e4)
predictY1 = predictValues(support = support,
method = met, params = resY1$EstParam)
predictY2 = predictValues(support = support,
method = met, params = resY2$EstParam)
lines(support, predictY1, col='red')
lines(support, predictY2, col='blue')
cat("Subject\t\tpower\t\t", met ,"\n")
cat("S#01\t\t", pow1, "\t\t", resY1$Rsquared)
cat("S#02\t\t", pow2, "\t\t", resY2$Rsquared)
########################################################################################
## Individual Analysis Needed
source(fuctions.R)
########################################################################################
## Individual Analysis Needed
source('fuctions.R')
########################################################################################
## Individual Analysis Needed
setwd("/Users/hyunwoogu/Dropbox/2019Spring/Dynamics/code/Forgetting/")
source('fuctions.R')
source('fuctions.R')
source(fuctions.R)
source("./fuctions.R")
getwd()
source("/fuctions.R")
source("/Users/hyunwoogu/Dropbox/2019Spring/Dynamics/code/Forgetting/fuctions.R")
source("/Users/hyunwoogu/Dropbox/2019Spring/Dynamics/code/Forgetting/fuctions")
source("fuctions")
getwd()
source("fuctions.r")
source("fuctions.r")
source("functions.R")
runApp('forget')
runApp('forget')
runApp('forget')
runApp('forget')
runApp('forget')
runApp('forget')
runApp('forget')
runApp('forget')
runApp('forget')
########################################################################################
## Individual Analysis Needed
setwd("/Users/hyunwoogu/Dropbox/2019Spring/Dynamics/code/Forgetting/")
source("functions.R")
methodList = c("lin", "exp", "hyp", "log", "exp-pow")
enough = F
cnt = 0
threshold = 1e3
realX = x3
realY = y3
while (enough == F & cnt < threshold)
{
# sampleDev = sort(abs(rnorm(length(y), sd=.1)), decreasing = T)
sampleDev = (rnorm(length(realY), sd=.1))
sampleY1 = sapply(realY + sampleDev, function(x) min(x,.99))
sampleY2 = sapply(realY - sampleDev, function(x) max(x,.51))
if (is.unsorted(rev(sampleY1)) | is.unsorted(rev(sampleY2))) next
pow1 = pow2 = 0
while (pow1 == 0 | pow2 == 0) {
pow1 = tryCatch(
getRsq(realX, sampleY1, method="pow", loud=F),
error = function(error_message){
message(".")
return(0)
})
pow2 = tryCatch(
getRsq(realX, sampleY2, method="pow", loud=F),
error = function(error_message){
message(".")
return(0)
})
}
for (met in methodList)
{
res1 = res2 = NA
while (c(is.na(res1))[1] | c(is.na(res2))[1]){
res1 = tryCatch(
getRsq(realX, sampleY1, method=met),
error = function(error_message){
message(".")
return(NA)
})
res2 = tryCatch(
getRsq(realX, sampleY2, method=met),
error = function(error_message){
message(".")
return(NA)
})
}
if ((res1$Rsquared > 0.9) & (res1$Rsquared > pow1) & (res2$Rsquared > 0.9) & (res2$Rsquared > pow2)) {
enough = T
break
}
}
cnt = cnt + 1
if (cnt == threshold) print("threshold reached")
}
plot(NULL, xlim=c(0,15), ylim=c(0.5,1))
points(realX, realY)
points(realX, sampleY1, col='red')
points(realX, sampleY2, col='blue')
resY1 = resY2 = NA
while (c(is.na(resY1))[1] | c(is.na(resY2))[1]) {
resY1 = tryCatch(
getRsq(realX, sampleY1, method=met, loud = T),
error = function(error_message){
message(".")
return(NA)
})
resY2 = tryCatch(
getRsq(realX, sampleY2, method=met, loud = T),
error = function(error_message){
message(".")
return(NA)
})
}
support = seq(0.001, max(realX), length=1e4)
predictY1 = predictValues(support = support,
method = met, params = resY1$EstParam)
predictY2 = predictValues(support = support,
method = met, params = resY2$EstParam)
lines(support, predictY1, col='red')
lines(support, predictY2, col='blue')
cat("Subject\t\tpower\t\t", met ,"\n")
cat("S#01\t\t", pow1, "\t\t", resY1$Rsquared, "\n")
cat("S#02\t\t", pow2, "\t\t", resY2$Rsquared, "\n")
legend(10, 1, legend=c("Subject 1", "Subject 2"),
col=c("red", "blue"), cex=0.8)
legend(10, 1, legend=c("Subject 1", "Subject 2"),
col=c("red", "blue"), cex=3)
legend(10, 1, legend=c("Subject 1", "Subject 2"),
col=c("red", "blue"), cex=1.2)
legend(10, 1, legend=c("Subject 1", "Subject 2"),
lty=1, col=c("red", "blue"), cex=1.2)
legend(10, 1, legend=c("Subject 1", "Subject 2"),
lty=1, col=c("red", "blue"), cex=1.1)
sumAD_lin = function(par, x, y){
sum(abs( y - (par[1] - par[2] * x)) )
}
sumAD_exp = function(par, x, y){
sum(abs( y - (par[1] * exp(-par[2] * x)) ))
}
sumAD_hyp = function(par, x, y){
sum(abs( y - (1/(par[1] + par[2] * x)) ))
}
sumAD_log = function(par, x, y){
sum(abs( y - (par[1] - par[2] * log(x))) )
}
sumAD_pow = function(par, x, y){
sum(abs( y - (par[1] * x^(-par[2]))) )
}
sumAD_exppw = function(par, x, y){
sum(abs( y - (par[1] * exp(-2 * par[2] * sqrt(x)) )) )
}
methodLists = c("lin", "exp", "hyp", "log", "pow", "exppw")
for (i in methodLists){
if (i == "lin") cat("Name\t\ta\tb\tloss\n")
function_name = sprintf("sumAD_%s", i)
res = optim(par = rnorm(2,sd=.1), fn = get(function_name), x=x1, y=y1)
cat(i, "\t\t", round(res$par[1], 3), "\t", round(res$par[2], 3), "\t", round(res$value,4), "\n")
}
for (i in methodLists){
if (i == "lin") cat("Name\t\ta\tb\tloss\n")
function_name = sprintf("sumAD_%s", i)
res = optim(par = rnorm(2,sd=.1), fn = get(function_name), x=x1, y=y1)
while (i == "hyp" & res$par[1] > 1) res = optim(par = rnorm(2,sd=.1), fn = get(function_name), x=x1, y=y1)
cat(i, "\t\t", round(res$par[1], 3), "\t", round(res$par[2], 3), "\t", round(res$value,4), "\n")
}
for (i in methodLists){
if (i == "lin") cat("Name\t\ta\tb\tloss\n")
function_name = sprintf("sumAD_%s", i)
res = optim(par = rnorm(2,sd=.1), fn = get(function_name), x=x1, y=y1)
while (i == "hyp" & abs(res$par[1]) > 1) res = optim(par = rnorm(2,sd=.1), fn = get(function_name), x=x1, y=y1)
cat(i, "\t\t", round(res$par[1], 3), "\t", round(res$par[2], 3), "\t", round(res$value,4), "\n")
}
for (i in methodLists){
if (i == "lin") cat("Name\t\ta\tb\tloss\n")
function_name = sprintf("sumAD_%s", i)
res = optim(par = rnorm(2,sd=.1), fn = get(function_name), x=x1, y=y1)
while (i == "hyp" & abs(res$par[1]) > 1) res = optim(par = rnorm(2,sd=.1), fn = get(function_name), x=x1, y=y1)
cat(i, "\t\t", round(res$par[1], 3), "\t", round(res$par[2], 3), "\t", round(res$value,4), "\n")
}
for (i in methodLists){
if (i == "lin") cat("Name\t\ta\tb\tloss\n")
function_name = sprintf("sumAD_%s", i)
res = optim(par = rnorm(2,sd=.1), fn = get(function_name), x=x1, y=y1)
while (i == "hyp" & abs(res$par[1]) > 1) res = optim(par = rnorm(2,sd=.1), fn = get(function_name), x=x1, y=y1)
cat(i, "\t\t", round(res$par[1], 3), "\t", round(res$par[2], 3), "\t", round(res$value,4), "\n")
}
for (i in methodLists){
if (i == "lin") cat("Name\t\ta\tb\tloss\n")
function_name = sprintf("sumAD_%s", i)
res = optim(par = rnorm(2,sd=.1), fn = get(function_name), x=x1, y=y1)
while (i == "hyp" & abs(res$par[1]) > 1) res = optim(par = rnorm(2,sd=.1), fn = get(function_name), x=x1, y=y1)
cat(i, "\t\t", round(res$par[1], 3), "\t", round(res$par[2], 3), "\t", round(res$value,4), "\n")
}
runApp('forget')
runApp('forget')
res = nls(y1 ~ (a*x1^(-b)), start=list(a=rnorm(1),b=rnorm(1)))
sum((predict(res, x1)-mean(y1))^2)/(sum((y1-mean(y1))^2))
res = nls(y1 ~ (a*x1^(-b) + c), start=list(a=rnorm(1),b=rnorm(1), c=rnorm(1)))
sum((predict(res, x1)-mean(y1))^2)/(sum((y1-mean(y1))^2))
res = nls(y1 ~ (a * exp(-b * x1) + c), start=list(a=rnorm(1),b=rnorm(1), c=rnorm(1)))
sum((predict(res, x1)-mean(y1))^2)/(sum((y1-mean(y1))^2))
res = nls(y1 ~ (a * exp(-2 * b * sqrt(x1)) + c ), start=list(a=rnorm(1),b=rnorm(1), c=rnorm(1)))
sum((predict(res, x1)-mean(y1))^2)/(sum((y1-mean(y1))^2))
res = nls(y1 ~ (a*x1^(-b)), start=list(a=rnorm(1),b=rnorm(1)))
sum((predict(res, x1)-mean(y1))^2)/(sum((y1-mean(y1))^2))
res = nls(y1 ~ (a*x1^(-b) + c), start=list(a=rnorm(1),b=rnorm(1), c=rnorm(1)))
sum((predict(res, x1)-mean(y1))^2)/(sum((y1-mean(y1))^2))
res = nls(y1 ~ (a * exp(-b * x1) + c), start=list(a=rnorm(1),b=rnorm(1), c=rnorm(1)))
sum((predict(res, x1)-mean(y1))^2)/(sum((y1-mean(y1))^2))
res = nls(y1 ~ (a * exp(-2 * b * sqrt(x1)) + c ), start=list(a=rnorm(1),b=rnorm(1), c=rnorm(1)))
sum((predict(res, x1)-mean(y1))^2)/(sum((y1-mean(y1))^2))
res = nls(y1 ~ (a*x1^(-b)), start=list(a=rnorm(1),b=rnorm(1)))
sum((predict(res, x1)-mean(y1))^2)/(sum((y1-mean(y1))^2))
res = nls(y1 ~ (a*x1^(-b) + c), start=list(a=rnorm(1),b=rnorm(1), c=rnorm(1)))
sum((predict(res, x1)-mean(y1))^2)/(sum((y1-mean(y1))^2))
res = nls(y1 ~ (a * exp(-b * x1) + c), start=list(a=rnorm(1),b=rnorm(1), c=rnorm(1)))
sum((predict(res, x1)-mean(y1))^2)/(sum((y1-mean(y1))^2))
res = nls(y1 ~ (a * exp(-2 * b * sqrt(x1)) + c ), start=list(a=rnorm(1),b=rnorm(1), c=rnorm(1)))
sum((predict(res, x1)-mean(y1))^2)/(sum((y1-mean(y1))^2))
res = nls(y1 ~ (a*x1^(-b)), start=list(a=rnorm(1),b=rnorm(1)))
sum((predict(res, x1)-mean(y1))^2)/(sum((y1-mean(y1))^2))
runApp('forget')
res = nls(y1 ~ (a*x1^(-b)), start=list(a=rnorm(1),b=rnorm(1)))
res
res$m
resSum = summary(res)
resSum$parameters
resSum$parameters[3,1]
results = c(0.8, 0.7, 0.7, 0.7, 0.6, 0.6, 0.6, 0.7, 0.5)
plot(ts, results)
ts = c(1,2,3,5,8,24,48,72,96)
results = c(0.8, 0.7, 0.7, 0.7, 0.6, 0.6, 0.6, 0.7, 0.5)
plot(ts, results)
cat("Name\t\ta\t\tb\t\tc\t\tSSR\n")
## power
res = NA
while (is.na(res)) {
res = tryCatch(nls(y1 ~ (a*x1^(-b)), start=list(a=rnorm(1),b=rnorm(1))) ,
error = function(error_message){
message(".")
return(NA)
})
}
resSum = summary(res)
cat("power\t\t", resSum$parameters[1,1], "\t\t",  resSum$parameters[2,1], "\t\t", "NA")
SSR = sum((predict(res, x1)-mean(y1))^2)/(sum((y1-mean(y1))^2))
cat(SSR, "\n"
)
res = NA
while (is.na(res)) {
res = tryCatch(nls(wantY ~ a * exp(-b * wantX), start=list(a=rnorm(1),b=rnorm(1))) ,
error = function(error_message){
message(".")
return(NA)
})
}
res = NA
while (is.na(res)) {
res = tryCatch(nls(wantY ~ a * exp(-b * wantX), start=list(a=rnorm(1),b=rnorm(1))) ,
error = function(error_message){
message(".")
return(NA)
})
while (is.na(res)) {
res = tryCatch(nls(wantY ~ a * exp(-b * wantX), start=list(a=rnorm(1),b=rnorm(1))) ,
error = function(error_message){
message(".")
return(NA)
})
}
res
res = NA
while (is.na(res)) {
res = tryCatch(nls(wantY ~ a * exp(-b * wantX), start=list(a=rnorm(1),b=rnorm(1))) ,
error = function(error_message){
message(".")
return(NA)
})
}
res = NA
while (is.na(res)) {
res = tryCatch(nls(wantY ~ (a*wantX^(-b)), start=list(a=rnorm(1),b=rnorm(1))) ,
error = function(error_message){
message(".")
return(NA)
})
}
x = c(1,2,3,5,8,24,48,72,96)
y = c(0.8,0.7,0.7,0.7,0.6,0.6,0.6,0.7,0.5)
plot(x,y)
length(x)
length(y)
